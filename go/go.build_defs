_GO_ENV_VARS = ["GOCACHE", "GODEBUG", "GOENV", "GOFLAGS", "GOINSECURE", "GOPATH", "GOPROXY", "GOPRIVATE", "GONOPROXY", "GONOSUMDB", "GOROOT", "GOSUMDB"]

def go_build(name:str, out:str=None, deps:list=[], visibility:list=None,
             test_only:bool&testonly=False, definitions:str|list|dict=None, stamp:bool=False,
             tags:list=[], trimpath:bool=False, pass_env:list=[]):
    """Compiles a go binary.

    Args:
      name (str): Name of the rule.
      out (str): Name of the output file to create. Defaults to the same as `name`.
      deps (list): Dependencies
      visibility (list): Visibility of the rule.
      test_only (bool): If True, is only visible to test rules.
      definitions (str | list | dict): If set to a string, defines importpath.name=value
                     when calling the Go linker.  If set to a list, pass each value as a
                     definition to the linker.  If set to a dict, each key/value pair is
                     used to contruct the list of definitions passed to the linker.
      stamp (bool): Allows this rule to gain access to information about SCM revision etc
                    via env vars. These can be useful to pass into `definitions`.
      tags (list): List of Go build tags passed to the build command.
      trimpath (bool): Remove all file system paths from the resulting executable.
      pass_env (list): List of environment variables to be passed from outside.
                       Any changes to them will be recorded in this target's hash and will hence force it to rebuild.
    """
    cmds, tools = _go_build_cmds(definitions, tags, trimpath)

    return build_rule(
        name = name,
        srcs = glob(["*.go"], exclude = ["*_test.go"]),
        deps = deps,
        outs = [out or name],
        cmd = cmds,
        tools = tools,
        pass_env = _GO_ENV_VARS + pass_env,
        building_description = "Compiling...",
        needs_transitive_deps = True,
        binary = True,
        test_only = test_only,
        visibility = visibility,
        requires = ["go"],
        stamp = stamp,
    )

def _go_build_cmds(definitions:str|list|dict=None, tags:list=[], trimpath:bool):
    """Returns the commands to run for compiling a Go binary."""

    flags = 'build'

    if trimpath:
        flags += ' -trimpath'

    if len(tags) > 0:
        flags += ' -tags "%s"' % ','.join(tags)

    linkerdefs = []
    if definitions is None:
        pass
    elif isinstance(definitions, str):
        linkerdefs += [f'{definitions}']
    elif isinstance(definitions, list):
        linkerdefs += [f'{linkerdef}' for linkerdef in definitions]
    elif isinstance(definitions, dict):
        linkerdefs = [k if v is None else f'{k}={v}' for k, v in sorted(definitions.items())]

    defs = ' '.join([f'-X "{linkerdef}"' for linkerdef in linkerdefs])

    cmds = {
        'dbg': f'cd "$(pwd | sed "s/plz-out\/.*//")" && "$TOOLS_GO" {flags} -ldflags "{defs}" -o "$OUTS" "./$PKG_DIR"',
        'opt': f'cd "$(pwd | sed "s/plz-out\/.*//")" && "$TOOLS_GO" {flags} -ldflags "-s -w {defs}" -o "$OUTS" "./$PKG_DIR"',
    }

    return cmds, {
        'go': [CONFIG.GO_TOOL],
    }
