def golangci_lint_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                         visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled golangci-lint binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/golangci/golangci-lint/releases/download/v{version}/golangci-lint-{version}-{os}-{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = [f"golangci-lint-{version}-{os}-{arch}/golangci-lint"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def gotestsum_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                     visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled gotestsum binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/gotestyourself/gotestsum/releases/download/v{version}/gotestsum_{version}_{os}_{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = ["gotestsum"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def mga_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
               visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled mga binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/sagikazarmark/mga/releases/download/v{version}/mga_{os}_{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = ["mga"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def pkger_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                 visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled pkger binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    download_os = {
        "linux": "Linux",
        "darwin": "Darwin",
    }.get(os, os)

    download_arch = {
        "amd64": "x86_64",
        "386": "i386",
    }.get(arch, arch)

    return remote_file(
        name = name,
        url = f"https://github.com/markbates/pkger/releases/download/v{version}/pkger_{version}_{download_os}_{download_arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = ["pkger"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def go_bindata_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                      visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled go-bindata binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/kevinburke/go-bindata/releases/download/v{version}/go-bindata-{os}-{arch}",
        hashes = hashes,
        out = out,
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def wollemi_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                   visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled wollemi binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/tcncloud/wollemi/releases/download/v{version}/wollemi-v{version}-{os}-{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = ["wollemi"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def wollemi_wrapper(name:str, binary:str, out:str="", labels:list=[],
                    visibility:list=None, test_only:bool&testonly=False):
    """Wollemi wrapper script for running Wollemi with plz run.

    Args:
      name (str): Name of the rule.
      binary (str): Wollemi binary target.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """

    return genrule(
        name = name,
        outs = [out or name],
        binary = True,
        cmd = f"cat > \"$OUT\" << EOF\n#!/bin/sh\nexport GOROOT=$(\"$TOOLS_GO\" env GOROOT)\n$(out_exe {binary}) \\\\$@\nEOF\n",
        tools = {"go": [CONFIG.GO_TOOL]},
        deps = [binary],
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )
