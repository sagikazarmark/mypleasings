subrepo = subrepo_name()
subrepo = f"///{subrepo}" if subrepo else ""

CONFIG.setdefault("WARP_TOOL", subrepo + "//tools/packaging:warp")

def warp_jar(name:str, jar:str, jre:str, out:str=None,
             labels:list=[], visibility:list=None, test_only:bool&testonly=False):
    """Packages a JAR file and a JRE into a single executable.

    Args:
      name (str): Name of the rule.
      jar (str): JAR file.
      jre (str): JRE (arch dependent).
      out (str): Name of the output file to create. Defaults to the same as `name`.
      labels (list): Labels of this rule.
      visibility (list): Visibility of the rule.
      test_only (bool): If True, is only visible to test rules.
    """

    assert jar, "JAR file is required"
    assert jre, "JRE is required"

    os = CONFIG.OS
    arch = CONFIG.ARCH

    if os == "darwin":
        os = "macos"

    if arch == "amd64":
        arch = "x64"

    exec = sh_cmd(
        name = name + "_exec",
        cmd = """
HERE=\\\\${BASH_SOURCE%/*}

"\\\\$HERE/jre/bin/java" -jar "\\\\$HERE/app.jar" "\\\\$@"
"""
    )

    return build_rule(
        name = name,
        srcs = {
            "jar": [jar],
            "jre": [jre],
            "exec": [exec],
        },
        outs = [out or name],
        cmd = " && ".join([
            "mkdir -p bundle bundle/bin",
            'cp "$SRCS_EXEC" ./bundle/exec.sh',
            'cp -r "$SRCS_JRE" ./bundle/jre',
            'cp -r "$SRCS_JAR" ./bundle/app.jar',
            "chmod +x ./bundle/jre/bin/*",
            f'"$TOOLS_WARP" -a {os}-{arch} -e exec.sh -i ./bundle -o "$OUT"',
        ]),
        tools = {"warp": [CONFIG.WARP_TOOL]},
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )
