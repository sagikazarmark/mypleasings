subrepo = subrepo_name()
subrepo = f"///{subrepo}" if subrepo else ""

def licensei_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                    visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled licensei binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/goph/licensei/releases/download/v{version}/licensei_{os}_{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = ["licensei"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def migrate_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                   visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled migrate binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/golang-migrate/migrate/releases/download/v{version}/migrate.{os}-{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = [f"migrate.{os}-{arch}"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def jq_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
              visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled jq binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    download_os = {
        "darwin": "osx",
    }.get(os, os)

    return remote_file(
        name = name,
        url = [
            f"https://github.com/stedolan/jq/releases/download/jq-{version}/jq-{download_os}64",
            f"https://github.com/stedolan/jq/releases/download/jq-{version}/jq-{download_os}-amd64",
        ],
        hashes = hashes,
        out = out,
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def yq_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
              visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled yq binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    # As of 4.1.0 the tag contains a "v" prefix
    sergments = version.split(".")
    if int(sergments[0]) < 4 or (int(sergments[0]) <= 4 and int(sergments[1]) < 1):
        return remote_file(
            name = name,
            url = f"https://github.com/mikefarah/yq/releases/download/{version}/yq_{os}_{arch}",
            hashes = hashes,
            out = out or name,
            binary = True,
            labels = labels,
            visibility = visibility,
            test_only = test_only,
        )

    return remote_file(
        name = name,
        url = f"https://github.com/mikefarah/yq/releases/download/v{version}/yq_{os}_{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = [f"yq_{os}_{arch}"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def semver_script(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                  visibility:list=None, test_only:bool&testonly=False):
    """Downloads a semver script.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """

    return remote_file(
        name = name,
        url = f"https://raw.githubusercontent.com/fsaintjacques/semver-tool/{version}/src/semver",
        hashes = hashes,
        out = out,
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def fossa_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                   visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled fossa binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return remote_file(
        name = name,
        url = f"https://github.com/fossas/fossa-cli/releases/download/v{version}/fossa-cli_{version}_{os}_{arch}.tar.gz",
        hashes = hashes,
        out = out,
        extract = True,
        exported_files = [f"fossa"],
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

CONFIG.setdefault("RELEASE_TAG_PREFIX", "v")
CONFIG.setdefault("SEMVER_TOOL", subrepo + "//tools/misc:semver")

def releaser_script(name:str, out:str=None, labels:list=[],
                    visibility:list=None, test_only:bool&testonly=False):
    """Builds a releaser script.

    Args:
      name (str): Name of the rule.
      out (str): Output name of the script. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """

    return sh_cmd(
        name = name,
        shell = "/usr/bin/env bash",
        deps = [CONFIG.SEMVER_TOOL],
        out = out,
        labels = labels,
        cmd = f"\nTAG_PREFIX={CONFIG.RELEASE_TAG_PREFIX}\n" + f"TOOLS_SEMVER=$(out_exe {CONFIG.SEMVER_TOOL})\n" + """
set -o errexit -o pipefail

# Global regex variables
NAT="0|[1-9][0-9]*"
VERSION_REGEX="^[vV]?(\\\$NAT)\.(\\\$NAT)\.(\\\$NAT)$"

PROG=release

USAGE="\\
Usage:
  \\\$PROG (major|minor|patch)
  \\\$PROG --help

Options:
  -t, --tag              Tag the current HEAD with the new version.
  -p, --push             Push the new tag to the "origin" remote.
  -n, --dry-run          Print the commands to be executed.
  -h, --help             Print this help message.
"

function error {
  echo -e "\x1B[31m\\\$1\x1B[0m" >&2

  exit 1
}

# Default values of arguments
CREATE_TAG=false
PUSH=false
DRY_RUN=false
HELP=false
ARGS=()

# Loop through arguments and process them
for arg in "\\\$@"
do
    case \\\$arg in
        -t|--tag)
        CREATE_TAG=true
        shift # Remove --tag from processing
        ;;
        -p|--push)
        PUSH=true
        shift # Remove --push from processing
        ;;
        -n|--dry-run)
        DRY_RUN=true
        shift # Remove --dry-run from processing
        ;;
        -h|--help)
        HELP=true
        shift # Remove --help from processing
        ;;
        *)
        ARGS+=("\\\$1")
        shift # Remove generic argument from processing
        ;;
    esac
done

# Show usage
if [[ \\\$HELP == true ]]; then
    echo -e "\\\$USAGE"

    exit 0
fi

# Prepare dry-run command
CMD=""
if [[ \\\$DRY_RUN == true ]]; then
    CMD="echo"
else
    CMD=""
fi

CURRENT_BRANCH="\\\$(git branch --show-current)"
if [[ "\\\$CURRENT_BRANCH" != "master" ]]; then
    error "cannot release from branch \\"\\\$CURRENT_BRANCH\\": please switch to master"
fi

LATEST_VERSION="\\\$(git tag | grep -E "\\\$VERSION_REGEX" | sort -r --version-sort | head -1)"
if [[ "\\\$LATEST_VERSION" == "" ]]; then
    error "failed to determine latest version"
fi

VERSION_TO_BUMP="\\\${ARGS[0]}"
if [[ ! "\\\$VERSION_TO_BUMP" =~ ^(major|minor|patch)$ ]]; then
    error "invalid version bump command \\"\\\$VERSION_TO_BUMP\\""
fi

TAG="\\\$("\\\$TOOLS_SEMVER" bump \\\$VERSION_TO_BUMP \\\$LATEST_VERSION)"

# Validate tag
if [[ "\\\$TAG" == "" ]]; then
    error "missing tag"
fi

sed -e "s/^## \[Unreleased\]$/## [Unreleased]\\\\\\"$'\\n'"\\\\\\"$'\\n'"\\\\\\"$'\\n'"## [\\\$TAG] - $(date +%Y-%m-%d)/g; s|^\[Unreleased\]: \(.*\/compare\/\)\(.*\)...HEAD$|[Unreleased]: \1\\\$TAG_PREFIX\\\$TAG...HEAD\\\\\\"$'\\n'"[\\\$TAG]: \1\2...\\\$TAG_PREFIX\\\$TAG|g" CHANGELOG.md > CHANGELOG.md.new
\\\$CMD mv CHANGELOG.md.new CHANGELOG.md

if [[ \\\$CREATE_TAG == true ]]; then
    \\\$CMD git add CHANGELOG.md
    \\\$CMD git commit -m "Prepare release \\\$TAG"
    \\\$CMD git tag -m "Release \\\$TAG" \\\$TAG_PREFIX\\\$TAG

    if [[ \\\$PUSH == true ]]; then
        \\\$CMD git push
        \\\$CMD git push origin \\\$TAG_PREFIX\\\$TAG
    fi
fi

echo "Version updated to \\\$TAG!"

if [[ \\\$PUSH == false ]]; then
	echo
	echo "Review the changes made by this script then execute the following:"

    if [[ \\\$CREATE_TAG == false ]]; then
        echo
        echo "git add CHANGELOG.md && git commit -m 'Prepare release \\\$TAG' && git tag -m 'Release \\\$TAG' \\\$TAG_PREFIX\\\$TAG"
        echo
        echo "Finally, push the changes:"
    fi

	echo
	echo "git push; git push origin \\\$TAG_PREFIX\\\$TAG"
fi
""",
    )
