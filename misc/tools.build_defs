def licensei_binary(name:str, version:str=None, hashes:list=None, out:str="",
                         visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled licensei binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return genrule(
        name = name,
        srcs = [remote_file(
            name = name,
            _tag = "download",
            url = f"https://github.com/goph/licensei/releases/download/v{version}/licensei_{os}_{arch}.tar.gz",
            hashes = hashes,
            out = f"licensei-{version}-{os}-{arch}.tar.gz",
        )],
        outs = [out or "licensei"],
        binary = True,
        cmd = '"$TOOL" x "$SRCS" licensei -o tmp && mv $(find tmp -name "licensei") "$OUT"',
        tools = [CONFIG.JARCAT_TOOL],
        visibility = visibility,
        test_only = test_only,
    )

def migrate_binary(name:str, version:str=None, hashes:list=None, out:str="",
                         visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled migrate binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    return genrule(
        name = name,
        srcs = [remote_file(
            name = name,
            _tag = "download",
            url = f"https://github.com/golang-migrate/migrate/releases/download/v{version}/migrate.{os}-{arch}.tar.gz",
            hashes = hashes,
            out = f"migrate-{version}-{os}-{arch}.tar.gz",
        )],
        outs = [out or "migrate"],
        binary = True,
        cmd = f'"$TOOL" x "$SRCS" migrate -o tmp && mv $(find tmp -name "migrate.{os}-{arch}") "$OUT"',
        tools = [CONFIG.JARCAT_TOOL],
        visibility = visibility,
        test_only = test_only,
    )

def jq_binary(name:str, version:str=None, hashes:list=None, out:str="",
                         visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled jq binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS
    arch = CONFIG.HOSTARCH if host else CONFIG.ARCH

    jq_host = os

    if os == "darwin":
        jq_host = "osx"

    return remote_file(
        name = "jq",
        url = [
            f"https://github.com/stedolan/jq/releases/download/jq-{version}/jq-{jq_host}64",
            f"https://github.com/stedolan/jq/releases/download/jq-{version}/jq-{jq_host}-amd64",
        ],
        out = out or "jq",
        binary = True,
        visibility = visibility,
        test_only = test_only,
    )
