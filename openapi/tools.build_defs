subinclude("//java")

def openapi_generator_warp(
    name:str,
    version:str,
    jre:str,
    hashes:list=None,
    labels:list=[],
    visibility:list=None,
):
    """OpenAPI Generator (https://github.com/OpenAPITools/openapi-generator) packed into a single executable.

    Args:
      name (str): Name of the rule.
      version (str): Version of the JAR to download.
      jre (str): JRE (arch dependent).
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
    """

    assert jre, "JRE is required"

    jar = remote_file(
        name = name+"-jar",
        url = f"https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/{version}/openapi-generator-cli-{version}.jar",
        hashes = hashes,
        out = name+".jar",
    )

    return warp_jar(
        name = name,
        jar = jar,
        jre = jre,
        labels = labels,
        visibility = visibility,
    )

def openapi_generator_docker(
    name:str,
    image_name:str,
    image_version:str,
    labels:list=[],
    visibility:list=None,
):
    """Shell script wrapper around the OpenAPI Generator (https://github.com/OpenAPITools/openapi-generator) Docker image.

    Args:
      name (str): Name of the rule.
      image_name (str): Container image name.
      image_version (str): Container image version.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
    """

    return sh_cmd(
        name = name,
        cmd = """
set -xe

if [[ -n \\\\$SRC ]]; then
    export WORKSPACE=\\\\$TMP_DIR/\\\\$SRC:/workspace/\\\\$SRC
fi

if [[ -n \\\\$DATA ]]; then
    export WORKSPACE=\\\\$TMP_DIR/\\\\$DATA:/workspace/\\\\$DATA
fi

if [[ -n \\\\$OUT ]]; then
    docker run --rm -v "\\\\$WORKSPACE" -v \\\\$OUT:\\\\$OUT -w /workspace {image_name}:{image_version} \\\\$@
else
    docker run --rm -v "\\\\$WORKSPACE" -w /workspace {image_name}:{image_version} \\\\$@
fi

if [[ -n \\\\$OUT && \\\\$OS == linux ]]; then
    sudo chown -R \\\\$(id -u).\\\\$(id -g) "\\\\$OUT"
fi
""".format(image_name = image_name, image_version = image_version),
        shell = "/bin/bash",
        labels = labels,
        visibility = visibility,
    )

def spectral_binary(name:str, version:str, hashes:list=None, out:str="", labels:list=[],
                    visibility:list=None, test_only:bool&testonly=False, host:bool=True):
    """Downloads a precompiled spectral binary.

    Args:
      name (str): Name of the rule.
      version (str): Version of the binary to download.
      hashes (list): Hashes to verify the download against.
      out (str): Output name of the binary. Chosen automatically if not given.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
      host (bool): If true the rule will always target the host OS and Arch.
    """

    os = CONFIG.HOSTOS if host else CONFIG.OS

    download_os = os

    if os == "darwin":
        download_os = "macos"

    return remote_file(
        name = name,
        url = f"https://github.com/stoplightio/spectral/releases/download/v{version}/spectral-{download_os}",
        hashes = hashes,
        out = out or name,
        binary = True,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )
