subrepo = subrepo_name()
subrepo = f"///{subrepo}" if subrepo else ""

CONFIG.setdefault("OPENAPI_GENERATOR_TOOL", subrepo + "//tools/openapi:openapi-generator-docker")

def openapi_library(name:str, spec:str, generator:str, out:str=None, additional_properties:dict={}, deps:list=[],
                    labels:list=[], visibility:list=None, test_only:bool&testonly=False, strip:list=None):
    """Generates client or server libraries and stubs from an OpenAPI specification.

    It uses the unofficial OpenAPI Generator under the hood: https://github.com/OpenAPITools/openapi-generator

    Args:
      name (str): Name of the rule.
      spec (str): OpenAPI specification.
      generator (str): Generator to use. See the documentation for the list of generators.
      out (str): Name of the output directory
      additional_properties (dict): A list of additional properties passed to the generator.
                                    See the documentation for the list of available options for each generator.
      deps (list): Dependencies
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true this rule will only be visible to tests.
      strip (list): List of paths to strip from the generated target.
    """

    out = out or f"openapi/{name}"

    main_cmd = f'"$TOOLS_OPENAPI_GENERATOR" generate -i "/workspace/$SRC" -o "$OUT" -g {generator}'

    for key, value in additional_properties.items():
        main_cmd += f" --additional-properties {key}={value}"

    if CONFIG.HOSTOS == "linux": # We need to change ownership on linux, because the container runs as root
        main_cmd += ' && sudo chown -R $(id -u).$(id -g) "$OUT"'

    cmd = [main_cmd]

    if strip:
        cmd += [f"rm -rf $OUT/{s}" for s in strip]

    return genrule(
        name = name,
        srcs = [spec],
        deps = deps,
        outs = [out],
        cmd = cmd,
        tools = {"openapi_generator": [CONFIG.OPENAPI_GENERATOR_TOOL]},
        building_description = "Generating...",
        sandbox = False,
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def openapi_validate(name:str, spec:str, labels:list=[]):
    """Validates an OpenAPI specification.

    It uses the unofficial OpenAPI Generator under the hood: https://github.com/OpenAPITools/openapi-generator

    Args:
      name (str): Name of the rule.
      spec (str): OpenAPI specification.
      labels (list): Labels for this rule.
    """

    return gentest(
        name = name,
        data = [spec],
        test_cmd = '"$TOOLS_OPENAPI_GENERATOR" validate -i "/workspace/$DATA" --recommend',
        test_tools = {"openapi_generator": [CONFIG.OPENAPI_GENERATOR_TOOL]},
        sandbox = False,
        no_test_output = True,
        labels = labels,
    )

CONFIG.setdefault("SPECTRAL_TOOL", subrepo + "//tools/openapi:spectral")

def spectral_lint(name:str, spec:str, labels:list=[]):
    """Lints an OpenAPI specification using Spectral.

    https://github.com/stoplightio/spectral

    Args:
      name (str): Name of the rule.
      spec (str): OpenAPI specification.
      labels (list): Labels for this rule.
    """

    return gentest(
        name = name,
        data = [spec],
        test_cmd = '"$TOOLS_SPECTRAL" lint "$DATA"',
        test_tools = {"spectral": [CONFIG.SPECTRAL_TOOL]},
        sandbox = False,
        no_test_output = True,
        labels = labels,
    )
