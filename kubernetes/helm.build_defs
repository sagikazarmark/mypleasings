subrepo = subrepo_name()
subrepo = f"///{subrepo}" if subrepo else ""

CONFIG.setdefault("HELM_TOOL", subrepo + "//tools/kubernetes:helm")

# TODO: add version option
# TODO: add app_version option
def helm_package(name:str, chart_yaml:str="Chart.yaml", values_file:str="values.yaml", readme:str="README.md",
                  templates:str=None, tests:str=None, crds:str=None, helmignore:str=".helmignore", srcs:list=[],
                  labels:list=[], visibility:list=None, test_only:bool&testonly=False):
    """Packages a Helm chart into a versioned chart archive.

    Args:
      name (str): Name of the rule.
      chart_yaml (str): Chart.yaml file of the chart.
      values_file (str): values.yaml file of the chart.
      readme (str): Readme of the chart.
      templates (str): Template files of the chart.
      tests (str): Test files of the chart.
      crds (str): Custom Resource Definitions (CRDs) of the chart.
      helmignore (str): Helmignore file of the chart.
      srcs (str): Additional source files of the chart (eg. custom config files).
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """

    assert chart_yaml, "Chart.yaml is required"
    assert values_file, "values.yaml is required"
    assert readme, "README.md is required"

    templates = templates or filegroup(
        name = name,
        tag = "templates",
        srcs = glob(["templates/**"], exclude = ["templates/tests", "templates/tests/**"]),
    )

    tests = tests or filegroup(
        name = name,
        tag = "tests",
        srcs = glob(["templates/tests/**"]),
    )

    crds = crds or filegroup(
        name = name,
        tag = "crds",
        srcs = glob(["crds/**"]),
    )

    return genrule(
        name = name,
        srcs = {
            "chart_yaml": [chart_yaml],
            "values_file": [values_file],
            "readme": [readme],
            "templates": [templates],
            "tests": [tests],
            "crds": [crds],
            "helmignore": [helmignore],
            "srcs": srcs,
        },
        cmd = [
            "mkdir -p _plz-charts/%s/{templates,templates/tests,crds} _helm-out/" % (name),
            f'mv "$SRCS_CHART_YAML" _plz-charts/{name}/Chart.yaml',
            f'mv "$SRCS_VALUES_FILE" _plz-charts/{name}/values.yaml',
            f'mv "$SRCS_README" _plz-charts/{name}/README.md',
            f'for src in $SRCS_TEMPLATES; do if [[ -d "$src" ]]; then mv "$src"/* _plz-charts/{name}/templates/; else mv "$src" _plz-charts/{name}/templates/; fi; done',
            f'for src in $SRCS_TESTS; do if [[ -d "$src" ]]; then mv "$src"/* _plz-charts/{name}/templates/tests/; else mv "$src" _plz-charts/{name}/templates/tests/; fi; done',
            f'for src in $SRCS_CRDS; do if [[ -d "$src" ]]; then mv "$src"/* _plz-charts/{name}/crds/; else mv "$src" _plz-charts/{name}/crds/; fi; done',
            'for src in ${SRCS_SRCS-}; do if [[ -d "$src" ]]; then mv "$src"/* _plz-charts/%s/; else mv "$src" _plz-charts/%s/; fi; done' % (name, name),
            f'mv "$SRCS_HELMIGNORE" _plz-charts/{name}/.helmignore',
            f'"$TOOLS_HELM" package --destination _helm-out _plz-charts/{name}',
        ],
        output_dirs = [f"_helm-out"],
        tools = {"helm": [CONFIG.HELM_TOOL]},
        labels = labels,
        visibility = visibility,
        test_only = test_only,
    )

def helm_lint(name:str, chart:str, labels:list=[], visibility:list=None):
    """Lints a Helm chart.

    Args:
      name (str): Name of the rule.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
    """

    return gentest(
        name = name,
        data = {
            "chart": [chart],
        },
        test_cmd = f'"$TOOLS_HELM" lint "$DATA_CHART"',
        test_tools = {"helm": [CONFIG.HELM_TOOL]},
        labels = labels,
        visibility = visibility,
        no_test_output = True,
    )

# TODO: add timeout option
def helm_e2e_test(name:str, chart:str, release_name:str=None, namespace:str=None,
                  kubeconfig:str=None, kube_context:str=None, kube_token:str=None, kube_apiserver:str=None,
                  atomic:bool=True, run_tests:bool=False, debug:bool=False,
                  flaky:bool|int=0, timeout:int=0,
                  labels:list=[], visibility:list=None):
    """Installs a Helm chart on a Kubernetes cluster to test its functionality.

    Args:
      name (str): Name of the rule.
      chart (str): Helm chart package to test.
      release_name (str): Release name for the installed chart. Chosen automatically if not given.
      namespace (str): Kubernetes namespace where the chart will be installed. The namespace must already exist.
      kubeconfig (str): Kubeconfig file.
      kube_context (str): Name of the kubeconfig context to use.
      kube_token (str): Bearer token used for authentication against the API server.
      kube_apiserver (str): Kubernetes API server address.
      atomic (bool): Delete the installation on failure.
      run_tests (bool): Run tests defined in the chart. (Otherwise it just installs and uninstalls the chart)
      debug (bool): Enable verbose output.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      labels (list): Labels for this rule.
      visibility (list): Visibility declaration of the rule.
    """

    data = {
        "chart": [chart],
    }

    helm_cmd = '"$TOOLS_HELM"'

    if namespace:
        helm_cmd += f' --namespace "{namespace}"'

    if kubeconfig:
        data["kubeconfig"] = [kubeconfig]

        helm_cmd += ' --kubeconfig "$DATA_KUBECONFIG"'

    if kube_context:
        helm_cmd += f' --kube-context "{kube_context}"'

    if kube_token:
        helm_cmd += f' --kube-token "{kube_token}"'

    if kube_apiserver:
        helm_cmd += f' --kube-apiserver "{kube_apiserver}"'

    if debug:
        helm_cmd += " --debug"

    release_name = release_name or name

    install_cmd = f"{helm_cmd} install --wait"

    if atomic:
        install_cmd += " --atomic"

    if timeout > 0:
        install_cmd += f" --timeout {timeout}"

    install_cmd += f' {release_name} "$DATA_CHART"'

    cmd = [install_cmd]

    if run_tests:
        test_cmd = f"{helm_cmd} test --logs"

        if timeout > 0:
            test_cmd += f" --timeout {timeout}"

        test_cmd += f" {release_name}"

        cmd += [test_cmd]

    return gentest(
        name = name,
        data = data,
        test_cmd = f"trap '{helm_cmd} uninstall {release_name}' EXIT;" + " && ".join(cmd),
        test_tools = {"helm": [CONFIG.HELM_TOOL]},
        pass_env = ["KUBECONFIG"],
        flaky = flaky,
        timeout = timeout,
        labels = labels,
        visibility = visibility,
        no_test_output = True,
    )
